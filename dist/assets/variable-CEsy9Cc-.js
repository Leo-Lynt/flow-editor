import{v as l,i as m,s as d}from"./index-CTqQs7-6.js";const f=1,u="flowforge_",c=1024*1024;function g(e){return{version:f,timestamp:Date.now(),data:e}}function v(e){return!e||typeof e!="object"||!("version"in e)?e:(e.version,e.data)}function h(e,t,s={}){const{skipValidation:i=!1}=s;if(typeof e!="string"||!e)throw new Error("Storage key must be a non-empty string");i||l(t);const a=g(t),o=JSON.stringify(a);if(o.length>c)throw new Error(`Value exceeds maximum storage size of ${c} bytes`);const r=`${u}${e}`;try{localStorage.setItem(r,o)}catch(n){throw n.name==="QuotaExceededError"?new Error("Storage quota exceeded. Please clear some data."):new Error(`Failed to store value: ${n.message}`)}}function w(e,t=null,s={}){const{skipValidation:i=!1}=s;if(typeof e!="string"||!e)throw new Error("Storage key must be a non-empty string");const a=`${u}${e}`;try{const o=localStorage.getItem(a);if(o===null||!m(o))return t;let r;try{r=i?JSON.parse(o):d(o)}catch{return t}return v(r)}catch{return t}}function b({nodeData:e,inputs:t,context:s}){const i=e.mode||"set",a=e.variableName;if(!a)throw new Error("variableName obrigatório");if(!/^[a-zA-Z0-9_-]+$/.test(a))throw new Error("Nome de variável deve conter apenas letras, números, _ ou -");const o=s.globalVariables||{};if(i==="set"){const r=t.input;try{l(r)}catch(n){throw new Error(`Valor inseguro para armazenamento: ${n.message}`)}o[a]=r;try{h(`var_${a}`,r)}catch{}return r}else{let r=o[a];if(r===void 0)try{r=w(`var_${a}`,void 0),r!==void 0&&(o[a]=r)}catch{}return r}}function p(e){const t=[];return e.variableName||t.push('Campo "variableName" obrigatório'),(!e.mode||!["set","get"].includes(e.mode))&&t.push('Campo "mode" deve ser "set" ou "get"'),{valid:t.length===0,errors:t}}export{b as execute,p as validate};
