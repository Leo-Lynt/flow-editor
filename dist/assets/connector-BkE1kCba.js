function g(e,o={}){const{enabledField:r="temporalEnabled",rangeTypeField:n="temporalRangeType",relativeRangeField:t="temporalRelativeRange",startDateField:s="temporalStartDate",endDateField:a="temporalEndDate",dateFieldName:i="dateField",prefix:h=""}=o,l=u=>h?`${h}${u.charAt(0).toUpperCase()}${u.slice(1)}`:u;if(!e[l(r)])return null;const c=e[l(n)]||"relative",p={enabled:!0,rangeType:c};return c==="relative"?p.relativeRange=e[l(t)]||"last_30_days":c==="absolute"&&(p.absoluteRange={startDate:e[l(s)],endDate:e[l(a)]}),p}function f(e,o=""){const r=i=>o?`${o}${i.charAt(0).toUpperCase()}${i.slice(1)}`:i,n=e[r("temporalEnabled")],t=e[r("dateField")];if(!n||!t)return{config:null,dateField:null};const s=e[r("temporalRangeType")]||"relative",a={enabled:!0,rangeType:s};return s==="relative"?a.relativeRange=e[r("temporalRelativeRange")]||"last_30_days":s==="absolute"&&(a.absoluteRange={startDate:e[r("temporalStartDate")],endDate:e[r("temporalEndDate")]}),{config:a,dateField:t}}function m(e){return{postgresql:5432,mysql:3306,sqlserver:1433}[e]||5432}async function y(e,o){const r={sourceType:"api",config:{url:e.apiUrl,method:e.apiMethod||"GET"}};e.authType&&e.authType!=="none"&&(r.config.auth={type:e.authType},e.authType==="bearer"&&e.authBearerToken?r.config.auth.token=e.authBearerToken:e.authType==="apikey"&&(r.config.auth.key=e.authApiKey,r.config.auth.value=e.authApiValue,r.config.auth.in=e.authApiKeyIn||"header"));const n=g(e);n&&(r.temporalConfig=n);const t={};e.transformFilterField&&e.transformFilterValue&&(t.filter={[e.transformFilterField]:e.transformFilterValue}),e.transformLimit&&(t.limit=e.transformLimit),e.transformFields&&(t.fields=e.transformFields.split(",").map(i=>i.trim())),Object.keys(t).length>0&&(r.transformations=t);const s=await fetch(`${o.baseUrl}/api/connectors/execute`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.token||""}`},body:JSON.stringify(r)});if(!s.ok)throw new Error(`API returned ${s.status}: ${s.statusText}`);const a=await s.json();if(a.success)return a.data.result.data;throw new Error(a.error?.message||"Unknown error")}async function T(e,o){const r={sourceType:"analytics",config:{connectionId:e.gaConnectionId,propertyId:e.gaPropertyId,metrics:e.gaMetrics?e.gaMetrics.split(",").map(s=>s.trim()):["activeUsers","sessions"],dimensions:e.gaDimensions?e.gaDimensions.split(",").map(s=>s.trim()):["date"]}};r.temporalConfig={enabled:!0,rangeType:e.temporalRangeType||"relative"},e.temporalRangeType==="relative"?r.temporalConfig.relativeRange=e.temporalRelativeRange||"last_30_days":e.temporalRangeType==="absolute"&&(r.temporalConfig.absoluteRange={startDate:e.temporalStartDate,endDate:e.temporalEndDate}),e.gaLimit&&(r.transformations={limit:parseInt(e.gaLimit)});const n=await fetch(`${o.baseUrl}/api/connectors/execute`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.token||""}`},body:JSON.stringify(r)});if(!n.ok)throw new Error(`API returned ${n.status}: ${n.statusText}`);const t=await n.json();if(t.success)return t.data.result.data;throw new Error(t.error?.message||"Unknown error")}async function w(e,o){const r={sourceType:"sheets",config:{url:e.sheetsUrl}};e.sheetsSheetName&&(r.config.sheetName=e.sheetsSheetName),e.sheetsRange&&(r.config.range=e.sheetsRange),r.config.includeHeaders=e.sheetsIncludeHeaders!==!1;const n=await fetch(`${o.baseUrl}/api/connectors/execute`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.token||""}`},body:JSON.stringify(r)});if(!n.ok)throw new Error(`API returned ${n.status}: ${n.statusText}`);const t=await n.json();if(t.success)return t.data.result.data;throw new Error(t.error?.message||"Unknown error")}async function b(e,o){const r={sourceType:"mk3d",config:{url:e.mk3dUrl,params:{projectID:e.mk3dProjectId}}},n=g(e,{prefix:"mk3d"});n?r.temporalConfig=n:(r.temporalConfig={enabled:!0,rangeType:e.mk3dTemporalRangeType||"relative"},e.mk3dTemporalRangeType==="relative"||!e.mk3dTemporalRangeType?r.temporalConfig.relativeRange=e.mk3dTemporalRelativeRange||"last_30_days":e.mk3dTemporalRangeType==="absolute"&&(r.temporalConfig.absoluteRange={startDate:e.mk3dTemporalStartDate,endDate:e.mk3dTemporalEndDate}));const t=await fetch(`${o.baseUrl}/api/connectors/execute`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.token||""}`},body:JSON.stringify(r)});if(!t.ok)throw new Error(`API returned ${t.status}: ${t.statusText}`);const s=await t.json();if(s.success)return s.data.result.data;throw new Error(s.error?.message||"Unknown error")}async function d(e,o){const r={sourceType:"json",config:{url:e.jsonCsvUrl}};e.jsonCsvFormat&&(r.config.format=e.jsonCsvFormat),e.jsonCsvDelimiter&&(r.config.csvDelimiter=e.jsonCsvDelimiter),r.config.csvHeaders=e.jsonCsvHasHeaders!==!1;const{config:n,dateField:t}=f(e,"jsonCsv");n&&t&&(r.config.dateField=t,r.temporalConfig=n);const s=await fetch(`${o.baseUrl}/api/connectors/execute`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.token||""}`},body:JSON.stringify(r)});if(!s.ok)throw new Error(`API returned ${s.status}: ${s.statusText}`);const a=await s.json();if(a.success)return a.data.result.data;throw new Error(a.error?.message||"Unknown error")}async function k(e,o){const r={sourceType:"graphql",config:{url:e.graphqlUrl,query:e.graphqlQuery}};if(e.graphqlVariables)try{r.config.variables=JSON.parse(e.graphqlVariables)}catch{throw new Error("Invalid JSON in variables field")}e.graphqlAuthType&&e.graphqlAuthType!=="none"&&(r.config.auth={type:e.graphqlAuthType},e.graphqlAuthType==="bearer"&&e.graphqlAuthToken?r.config.auth.token=e.graphqlAuthToken:e.graphqlAuthType==="apikey"&&(r.config.auth.key=e.graphqlAuthKey,r.config.auth.value=e.graphqlAuthValue));const n=g(e,{prefix:"graphql"});n&&(r.temporalConfig=n);const t=await fetch(`${o.baseUrl}/api/connectors/execute`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.token||""}`},body:JSON.stringify(r)});if(!t.ok)throw new Error(`API returned ${t.status}: ${t.statusText}`);const s=await t.json();if(s.success)return s.data.result.data;throw new Error(s.error?.message||"Unknown error")}async function C(e,o){const r={sourceType:"database",config:{type:e.databaseType,query:e.databaseQuery||"",connection:{host:e.databaseHost||"localhost",port:parseInt(e.databasePort)||m(e.databaseType),database:e.databaseName,user:e.databaseUser,password:e.databasePassword,ssl:e.databaseSsl||!1}}};if(e.databaseParams)try{r.config.params=JSON.parse(e.databaseParams)}catch{throw new Error("Invalid JSON in parameters field")}const{config:n,dateField:t}=f(e,"database");n&&t&&(r.config.dateField=t,r.temporalConfig=n);const s=await fetch(`${o.baseUrl}/api/connectors/execute`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${o.token||""}`},body:JSON.stringify(r)});if(!s.ok)throw new Error(`API returned ${s.status}: ${s.statusText}`);const a=await s.json();if(a.success)return a.data.result.data;throw new Error(a.error?.message||"Unknown error")}async function q(e,o){const r=e.sourceType;switch(r){case"api":if(!e.apiUrl)throw new Error("API connector requires apiUrl");return await y(e,o);case"google_analytics":if(!e.gaConnectionId)throw new Error("Google Analytics connector requires gaConnectionId");return await T(e,o);case"google_sheets":if(!e.sheetsUrl)throw new Error("Google Sheets connector requires sheetsUrl");return await w(e,o);case"mk3d":if(!e.mk3dUrl||!e.mk3dProjectId)throw new Error("MK3D connector requires mk3dUrl and mk3dProjectId");return await b(e,o);case"json":if(!e.jsonCsvUrl)throw new Error("JSON/CSV connector requires jsonCsvUrl");return await d(e,o);case"graphql":if(!e.graphqlUrl||!e.graphqlQuery)throw new Error("GraphQL connector requires graphqlUrl and graphqlQuery");return await k(e,o);case"database":if(!e.databaseType)throw new Error("Database connector requires databaseType");return await C(e,o);default:throw new Error(`Source type "${r}" not implemented or missing configuration`)}}async function v({nodeData:e,context:o}){const r=o.apiConfig||{};try{return await q(e,r)}catch(n){throw n}}function j(e){const o=[],r=e.sourceType;if(!r)return o.push('Campo "sourceType" obrigatório'),{valid:!1,errors:o};switch(r){case"api":e.apiUrl||o.push('Campo "apiUrl" obrigatório para sourceType=api');break;case"google_analytics":e.gaConnectionId||o.push('Campo "gaConnectionId" obrigatório para sourceType=google_analytics');break;case"google_sheets":e.sheetsUrl||o.push('Campo "sheetsUrl" obrigatório para sourceType=google_sheets');break;case"mk3d":(!e.mk3dUrl||!e.mk3dProjectId)&&o.push('Campos "mk3dUrl" e "mk3dProjectId" obrigatórios para sourceType=mk3d');break;case"json":e.jsonCsvUrl||o.push('Campo "jsonCsvUrl" obrigatório para sourceType=json');break;case"graphql":(!e.graphqlUrl||!e.graphqlQuery)&&o.push('Campos "graphqlUrl" e "graphqlQuery" obrigatórios para sourceType=graphql');break;case"database":e.databaseType||o.push('Campo "databaseType" obrigatório para sourceType=database');break}return{valid:o.length===0,errors:o}}export{v as execute,j as validate};
