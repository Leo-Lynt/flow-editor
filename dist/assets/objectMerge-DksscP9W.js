import{u as f}from"./executor-D39oo3pD.js";import"./index-CpYWmskZ.js";const{unwrapData:i}=f;function u(n,e){const t={...n};for(const r in e)e.hasOwnProperty(r)&&(e[r]&&typeof e[r]=="object"&&!Array.isArray(e[r])&&n[r]&&typeof n[r]=="object"&&!Array.isArray(n[r])?t[r]=u(n[r],e[r]):t[r]=e[r]);return t}function p(n,e){const t={};for(const r in n)n.hasOwnProperty(r)&&(t[`${r}_1`]=n[r]);for(const r in e)e.hasOwnProperty(r)&&(t[`${r}_2`]=e[r]);return t}function s({nodeData:n,inputs:e}){let t=i(e["input-1"]),r=i(e["input-2"]);if(typeof t!="object"||t===null||Array.isArray(t))throw new Error("Input 1 deve ser um objeto");if(typeof r!="object"||r===null||Array.isArray(r))throw new Error("Input 2 deve ser um objeto");const o=n.mergeMode||"shallow";return o==="deep"?u(t,r):o==="numbered"?p(t,r):{...t,...r}}function l(n){const e=[];return{valid:e.length===0,errors:e}}export{s as execute,l as validate};
