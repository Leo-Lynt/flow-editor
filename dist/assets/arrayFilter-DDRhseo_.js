import{u as h}from"./dataUtils-XrCV_Bny.js";import{g as d}from"./pathUtils-BLuGwn-4.js";import"./index-CTqQs7-6.js";function w(e,t="iso"){if(!e)return null;try{switch(t){case"iso":case"iso-datetime":const u=new Date(e);return isNaN(u.getTime())?null:u;case"br":if(typeof e!="string")return null;const a=e.split("/");if(a.length!==3)return null;const[l,r,s]=a,i=new Date(`${s}-${r.padStart(2,"0")}-${l.padStart(2,"0")}`);return isNaN(i.getTime())?null:i;case"us":if(typeof e!="string")return null;const n=e.split("/");if(n.length!==3)return null;const[f,o,c]=n,m=new Date(`${c}-${f.padStart(2,"0")}-${o.padStart(2,"0")}`);return isNaN(m.getTime())?null:m;case"timestamp":const p=Number(e);if(isNaN(p))return null;const g=new Date(p);return isNaN(g.getTime())?null:g;default:const N=new Date(e);return isNaN(N.getTime())?null:N}}catch{return null}}function y(e,t,u,a="auto",l="iso"){let r=e,s=t;if(a==="date"){const i=w(e,l),n=w(t,l);if(!i||!n)return!1;r=i.getTime(),s=n.getTime()}else if(a==="number"){if(r=Number(e),s=Number(t),isNaN(r)||isNaN(s))return!1}else if(a==="boolean"){const i=n=>{if(typeof n=="boolean")return n;if(typeof n=="number")return n!==0;if(typeof n=="string"){const f=n.toLowerCase();return f==="true"||f==="yes"||f==="1"}return!!n};r=i(e),s=i(t)}else if(a==="string")r=String(e),s=String(t);else if(a==="auto"){const i=Number(e),n=Number(t);!isNaN(i)&&!isNaN(n)?(r=i,s=n):(r=String(e),s=String(t))}switch(u){case"equals":return r===s;case"notEquals":return r!==s;case"greaterThan":return r>s;case"lessThan":return r<s;case"greaterOrEqual":return r>=s;case"lessOrEqual":return r<=s;case"contains":return String(r).toLowerCase().includes(String(s).toLowerCase());case"startsWith":return String(r).toLowerCase().startsWith(String(s).toLowerCase());case"endsWith":return String(r).toLowerCase().endsWith(String(s).toLowerCase());default:return!0}}function C({nodeData:e,inputs:t}){let u=h(t["data-input"]);if(!Array.isArray(u))throw new Error("Input deve ser um array");const a=e.fieldMode||"selector";let l;if(a==="custom")l=e.customField;else{const o=e.selectedField;Array.isArray(o)&&o.length>0?l=o[0]:typeof o=="string"&&(l=o)}const r=e.operator||"equals",s=t["exposed-value"]!==void 0?h(t["exposed-value"]):e.value,i=e.comparisonType||"auto",n=e.dateFormat||"iso";return r==="exists"?u.filter(o=>{const c=d(o,l);return c!=null}):r==="notExists"?u.filter(o=>{const c=d(o,l);return c==null}):u.filter(o=>{const c=d(o,l);return c==null?!1:y(c,s,r,i,n)})}function q(e){const t=[];return(e.fieldMode||"selector")==="custom"?e.customField||t.push("Campo customField obrigatório no modo custom"):(!e.selectedField||Array.isArray(e.selectedField)&&e.selectedField.length===0)&&t.push("Seleção de campo obrigatória"),e.operator||t.push('Campo "operator" obrigatório'),["equals","notEquals","greaterThan","lessThan","greaterOrEqual","lessOrEqual","contains","startsWith","endsWith"].includes(e.operator)&&!e.value&&t.push(`Operador "${e.operator}" requer um valor de comparação`),{valid:t.length===0,errors:t}}export{C as execute,q as validate};
